version: 2.1

master_branch_only: &master_branch_only
  filters:
    branches:
      only: /.*/
    tags:
      ignore: /.*/

production_only: &production_only
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /.*/

composer_install: &composer_install
  name: Composer install
  command: ./composer.phar install -n

composer_save_cache: &composer_save_cache
  key: composer-cache-{{ checksum "composer.lock" }}
  paths:
    - vendor

composer_restore_cache: &composer_restore_cache
  keys:
    - composer-cache-{{ checksum "composer.lock" }}

jobs:
  build:
    docker:
      - image: ${ACR_HOSTNAME_PD}/alpine-php82-build:2.1.0
        auth:
          username: ${ACR_LOGIN_PD}
          password: ${ACR_PASSWORD_PD}
    resource_class: large
    working_directory: /var/www/html
    steps:
      - run:
          name: Set git safe directory
          command: git config --global --add safe.directory /var/www/html
      - checkout
      - restore_cache:
          <<: *composer_restore_cache
      - run:
          <<: *composer_install
      - run:
          name: Documentation
          command: php create_documentation.php
      - save_cache:
          <<: *composer_save_cache
      - persist_to_workspace:
          root: /var/www/html
          paths:
            - .

  static:
    docker:
      - image: ${ACR_HOSTNAME_PD}/alpine-php82-build:2.1.0
        auth:
          username: ${ACR_LOGIN_PD}
          password: ${ACR_PASSWORD_PD}
    working_directory: /var/www/html
    resource_class: large
    steps:
      - attach_workspace:
          at: /var/www/html
      - run:
          name: PHPStan
          command: |
            mkdir -p results/PHPStan
            php -d memory_limit=4G vendor/bin/phpstan --error-format=junit > results/PHPStan/result.xml; php -d memory_limit=4G vendor/bin/phpstan
      - run:
          name: PHPCS
          command: |
            mkdir -p results/PHPCS
            vendor/bin/phpcs module
      - store_test_results:
          path: results
      - store_artifacts:
          path: results

  behat:
    resource_class: large
    working_directory: ~/project
    machine:
      docker_layer_caching: false
      image: ubuntu-2204:current
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Starting docker-compose environment
          command: |
            docker login ${ACR_HOSTNAME_PD} -u ${ACR_LOGIN_PD} -p ${ACR_PASSWORD_PD}
            export DOCKERIZE_VERSION=v0.6.1
            docker-compose up -d --quiet-pull
            curl -L -o dockerize.tar.gz https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            docker-compose exec --user=circleci api-php-fpm tar -C /tmp -xzvf dockerize.tar.gz
            docker-compose exec --user=circleci api-php-fpm /tmp/dockerize -wait tcp://baywa_ncr_db:3306 -timeout 1m
            docker-compose exec --user=circleci api-php-fpm /tmp/dockerize -wait tcp://baywa_ncr_db:9200 -timeout 1m
            docker-compose exec --user=circleci api-php-fpm /tmp/dockerize -wait tcp://baywa_ncr_api_nginx:8090 -timeout 1m
      - run:
          name: Phing
          command: |
            docker-compose exec --user=circleci api-php-fpm vendor/bin/phing init -propertyfile testing-conf.ini -Dauth.serverAddress=$AUTH_SERVER_ADDRESS -Dauth.tokenEndpoint=$AUTH_TOKEN_ENDPOINT -Dauth.managementApi.usersEndpoint=$AUTH_MANAGEMENT_API_USERS_ENDPOINT -Dauth.managementApi.logoutEndpoint=$AUTH_MANAGEMENT_API_LOGOUT_ENDPOINT -Dauth.managementApi.clientId=$AUTH_MANAGEMENT_API_CLIENT_ID -Dauth.managementApi.clientSecret=$AUTH_MANAGEMENT_API_CLIENT_SECRET -Dauth.jwksUrl=$AUTH_JWKS_URL
            docker-compose exec --user=circleci api-php-fpm rm -f data/cache/module*
      - run:
          name: Behat
          command: |
            docker-compose exec --user=circleci api-php-fpm mkdir -p results/Behat
            docker-compose exec --user=circleci api-php-fpm  vendor/bin/behat
      - store_test_results:
          path: results
      - store_artifacts:
          path: results

  remove-dev-dependencies:
    docker:
      - image: ${ACR_HOSTNAME_PD}/alpine-php82-build:2.1.0
        auth:
          username: ${ACR_LOGIN_PD}
          password: ${ACR_PASSWORD_PD}
    resource_class: large
    working_directory: /var/www/html
    steps:
      - attach_workspace:
          at: /var/www/html
      - run:
          name: Remove dev dependencies
          command: ./composer.phar install -n --no-dev

  deploy-production-microservice-example-api:
    docker:
      - image: ${ACR_HOSTNAME_PD}/alpine-php82-build:2.1.0
        auth:
          username: ${ACR_LOGIN_PD}
          password: ${ACR_PASSWORD_PD}
    resource_class: large
    working_directory: /var/www/html
    steps:
      - setup_remote_docker:
          version: 20.10.2
      - attach_workspace:
          at: /var/www/html
      - run:
          name: Build Microservice Example API Image
          command: |
            docker login ${ACR_HOSTNAME_PD} -u ${ACR_LOGIN_PD} -p ${ACR_PASSWORD_PD}
            docker build . -t ${ACR_HOSTNAME_PD}/microservice-example-api:${CIRCLE_TAG}
            docker push ${ACR_HOSTNAME_PD}/microservice-example-api:${CIRCLE_TAG}

  deploy-production-microservice-example-cli:
    docker:
      - image: ${ACR_HOSTNAME_PD}/alpine-php82-build:2.1.0
        auth:
          username: ${ACR_LOGIN_PD}
          password: ${ACR_PASSWORD_PD}
    resource_class: large
    working_directory: /var/www/html
    steps:
      - setup_remote_docker:
          version: 20.10.2
      - attach_workspace:
          at: /var/www/html
      - run:
          name: Build Microservice Example Cronjob Image
          command: |
            docker login ${ACR_HOSTNAME_PD} -u ${ACR_LOGIN_PD} -p ${ACR_PASSWORD_PD}
            docker build . -f Dockerfile_cli -t ${ACR_HOSTNAME_PD}/microservice-example-cli:${CIRCLE_TAG} --build-arg DOCKER_IMAGES_TAG=2.1.0
            docker push ${ACR_HOSTNAME_PD}/microservice-example-cli:${CIRCLE_TAG}

workflows:
  version: 2
  master:
    jobs:
      - build:
          <<: *master_branch_only
          context:
            - ACR_CREDENTIALS
      - static:
          <<: *master_branch_only
          context:
            - ACR_CREDENTIALS
          requires:
            - build
      - behat:
          <<: *master_branch_only
          context:
            - ACR_CREDENTIALS
            - KEYCLOAK_MANAGEMENT
          requires:
            - build
      - remove-dev-dependencies:
          <<: *master_branch_only
          context:
            - ACR_CREDENTIALS
          requires:
            - static
            - behat
  production:
    jobs:
      - build:
          <<: *production_only
          context:
            - ACR_CREDENTIALS
      - static:
          <<: *production_only
          context:
            - ACR_CREDENTIALS
          requires:
            - build
      - behat:
          <<: *production_only
          context:
            - ACR_CREDENTIALS
            - KEYCLOAK_MANAGEMENT
          requires:
            - build
      - remove-dev-dependencies:
          <<: *production_only
          context:
            - ACR_CREDENTIALS
          requires:
            - static
            - behat
      - deploy-production-microservice-example-api:
          <<: *production_only
          context:
            - ACR_CREDENTIALS
          requires:
            - remove-dev-dependencies
      - deploy-production-microservice-example-cli:
          <<: *production_only
          context:
            - ACR_CREDENTIALS
          requires:
            - remove-dev-dependencies
